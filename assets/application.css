/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Correct the line height in all browsers.
 * 3. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
/* Document
   ========================================================================== */
html {
  font-family: sans-serif;
  /* 1 */
  line-height: 1.15;
  /* 2 */
  -ms-text-size-adjust: 100%;
  /* 3 */
  -webkit-text-size-adjust: 100%;
  /* 3 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0; }

/**
 * Add the correct display in IE 9-.
 */
article,
aside,
footer,
header,
nav,
section {
  display: block; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */
figcaption,
figure,
main {
  /* 1 */
  display: block; }

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px; }

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */
a:active,
a:hover {
  outline-width: 0; }

/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */ }

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit; }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic; }

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000; }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio,
video {
  display: inline-block; }

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden; }

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */
details,
menu {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block; }

/**
 * Add the correct display in IE.
 */
template {
  display: none; }

/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
[hidden] {
  display: none; }

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the imagesheet itself
$imagesheet: width height image $imagesheet-images;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
/*
The `images` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include images($imagesheet-images);
*/
/*
Icon classes can be used entirely standalone. They are named after their original file names.

```html
<!-- `display: block` sprite -->
<div class="icon-home"></div>

<!-- `display: inline-block` sprite -->
<img class="icon-home" />
```
*/
.icon-arrow-green-down {
  background-image: image-url("images/arrows.png");
  background-position: -14px -13px;
  width: 10px;
  height: 5px; }

.icon-arrow-green-up {
  background-image: image-url("images/arrows.png");
  background-position: -14px -18px;
  width: 10px;
  height: 5px; }

.icon-arrow-grey {
  background-image: image-url("images/arrows.png");
  background-position: 0px 0px;
  width: 26px;
  height: 13px; }

.icon-arrow-orange-2 {
  background-image: image-url("images/arrows.png");
  background-position: -26px -14px;
  width: 14px;
  height: 20px; }

.icon-arrow-orange-3 {
  background-image: image-url("images/arrows.png");
  background-position: 0px -13px;
  width: 14px;
  height: 21px; }

.icon-arrow-orange {
  background-image: image-url("images/arrows.png");
  background-position: -40px -14px;
  width: 5px;
  height: 7px; }

.icon-arrow-white {
  background-image: image-url("images/arrows.png");
  background-position: -26px 0px;
  width: 21px;
  height: 14px; }

.wrap {
  padding: 0 10px; }
  @media (max-width: 767px) {
    .wrap {
      max-width: 767px;
      margin-left: auto;
      margin-right: auto; }
      .wrap:after {
        content: " ";
        display: block;
        clear: both; } }
  @media (min-width: 768px) and (max-width: 991px) {
    .wrap {
      max-width: 991px;
      margin-left: auto;
      margin-right: auto; }
      .wrap:after {
        content: " ";
        display: block;
        clear: both; } }
  @media (min-width: 992px) {
    .wrap {
      max-width: 1200px;
      margin-left: auto;
      margin-right: auto; }
      .wrap:after {
        content: " ";
        display: block;
        clear: both; } }

/* ---------- Global ---------- */
/* ---------- End Global ---------- */
/* ---------- Components ---------- */
/* $apple */
/* $apple */
/* $apple */
/* $apple */
/* $apple */
/* $apple */
/* ---------- End Components ---------- */
/* ---------- Pages ---------- */
/* ---------- End Pages ---------- */
form abbr[title] {
  border-bottom: 0 none; }

form input {
  font-family: '.HelveticaNeueDeskInterface-Regular';
  font-size: 11px; }

form input[type="checkbox"] {
  margin-right: 5px; }

form input[type="email"], form input[type="tel"], form input[type="text"], form textarea {
  box-sizing: border-box;
  padding: 10px;
  width: 100%;
  border: 1px solid #ccc;
  outline: none; }

form input[type="submit"] {
  border: 0 none; }

form label {
  display: block;
  margin-bottom: 5px;
  color: #4a4a4a;
  font-weight: bold; }

form .form-row {
  margin-bottom: 10px; }

/* 16px */
/* 24px based on 16px body font size */
h1, .alpha {
  font-size: 5.625em;
  /* 90px */
  line-height: 1em; }

h2, .beta {
  font-size: 3.875em;
  /* 62px */
  line-height: 1em; }

h3, .gamma {
  font-size: 2.625em;
  /* 42px */
  line-height: 1em; }

h4, .delta {
  font-size: 2.188em;
  /* 35px */
  line-height: 1em; }

h4, .epsilon {
  font-size: 1.875em;
  /* 30px */
  line-height: 1em; }

h5, .zeta {
  font-size: 1.25em;
  /* 20px */
  line-height: 1em; }

h6, .eta {
  font-size: 1em;
  /* 16px */
  line-height: 1em; }

h1, h2, h3, h4, h5, h6 {
  margin-bottom: 10px; }

.theta {
  font-size: 0.938em;
  /* 15px */
  line-height: 1em; }

.iota {
  font-size: 0.813em;
  /* 13px */
  line-height: 1em; }

dd, dt, li, p {
  font-size: 0.813em;
  /* 13px */
  line-height: 1.84615em;
  /* 24px / 13px */ }

p {
  margin: 0;
  padding: 0;
  vertical-align: baseline;
  border: 0;
  font-weight: normal;
  list-style: none;
  margin-bottom: 10px; }
  p.tertiary {
    color: #fff; }

strong, .bold-weight {
  font-weight: 700 !important; }

ul.bullets {
  list-style: disc inside; }
  ul.bullets li {
    margin-bottom: 10px; }

.body-link {
  color: #e14e00;
  text-decoration: underline; }
  .body-link:before {
    content: "";
    display: inline-block;
    margin-right: 5px;
    background-image: url(/assets/db67515c15f7669e2a0b16c23c56e657.png);
    background-position: -40px -14px;
    width: 5px;
    height: 7px; }
  .body-link:hover {
    text-decoration: none; }

.gg {
  font-family: "Garage Gothic", Arial, Helvetica, sans-serif;
  font-style: normal;
  font-weight: bold;
  text-transform: uppercase; }
  .gg.primary {
    color: #55a440; }
    .gg.primary em {
      color: #98cf50;
      font-size: 0.85483870967742em;
      /* 53px / 62px */ }
  .gg.secondary {
    color: #585858; }
  .gg.tertiary {
    color: #fff; }

.italic {
  font-style: italic; }

.light-weight {
  font-weight: 300 !important; }

.up-c {
  text-transform: uppercase; }

body {
  color: #585858;
  font-family: "Lato", Arial, Verdana, sans-serif;
  font-size: 1em;
  font-weight: normal;
  position: relative;
  right: 0; }

img {
  vertical-align: bottom; }

.center {
  text-align: center; }

.clearfix {
  *zoom: 1; }
  .clearfix:before, .clearfix:after {
    content: "";
    display: table; }
  .clearfix:after {
    clear: both; }

.content-padding {
  *zoom: 1;
  padding: 20px; }
  .content-padding:before, .content-padding:after {
    content: "";
    display: table; }
  .content-padding:after {
    clear: both; }

.hidden {
  height: 1px;
  overflow: hidden;
  position: absolute;
  top: auto;
  left: -10000px;
  width: 1px; }

.row {
  *zoom: 1;
  margin: 20px 0; }
  .row:before, .row:after {
    content: "";
    display: table; }
  .row:after {
    clear: both; }

@media (max-width: 767px) {
  body.nav-open {
    right: 66.66667%; } }

@media (max-width: 991px) {
  body {
    right: 0;
    -webkit-transition: right 0.2s ease-in-out;
    -moz-transition: right 0.2s ease-in-out;
    transition: right 0.2s ease-in-out; } }

@media (min-width: 768px) and (max-width: 991px) {
  body.nav-open {
    right: 50%; } }

.button, form input[type="submit"] {
  display: inline-block !important;
  font-family: "Garage Gothic", Arial, Helvetica, sans-serif;
  font-size: 1.5em;
  /* 24px */
  font-weight: bold;
  -webkit-transition: background-color 0.2s ease-in-out;
  -moz-transition: background-color 0.2s ease-in-out;
  transition: background-color 0.2s ease-in-out;
  text-decoration: none;
  text-transform: uppercase; }

.button-news {
  padding: 15px 20px;
  background-color: #fff; }

.button-primary, form input[type="submit"] {
  padding: 15px 30px;
  background-color: #e14e00;
  color: #fff; }
  .button-primary:hover, form input[type="submit"]:hover {
    background-color: #ae3c00; }

.button-secondary {
  padding: 10px 20px;
  background-color: #fff;
  border: 1px solid #e14e00;
  color: #e14e00; }
  .button-secondary:hover {
    background-color: #e6e6e6; }

.button-pagination {
  padding: 10px 30px;
  background-color: #dedede;
  color: #797979; }
  .button-pagination:hover {
    background-color: #c5c5c5; }

.touch-nav {
  margin: 0;
  padding: 0;
  vertical-align: baseline;
  border: 0;
  font-weight: normal;
  list-style: none;
  *zoom: 1;
  position: relative;
  width: 100%;
  height: 70px; }
  .touch-nav:before, .touch-nav:after {
    content: "";
    display: table; }
  .touch-nav:after {
    clear: both; }
  .touch-nav:after {
    content: "";
    position: absolute;
    width: 100%;
    height: 1px;
    bottom: 20px;
    left: 0;
    right: 0;
    background-color: #cfcfcf; }
  .touch-nav .nav-items {
    margin: 0;
    padding: 0;
    vertical-align: baseline;
    border: 0;
    font-weight: normal;
    list-style: none;
    height: auto;
    position: absolute;
    left: 0;
    height: 50px;
    transition: all 600ms cubic-bezier(0.165, 0.84, 0.44, 1); }
  .touch-nav .list-holder {
    width: calc(100% - 100px);
    overflow: hidden;
    float: left;
    position: relative;
    height: 70px; }
  .touch-nav .nav-mover {
    margin: 0;
    padding: 0;
    vertical-align: baseline;
    border: 0;
    font-weight: normal;
    list-style: none;
    float: left;
    position: relative;
    margin: 15px;
    width: 10px;
    height: 20px;
    font-size: 1.25em;
    /* 20px */
    font-weight: 300;
    line-height: 1em;
    background-size: contain; }
    .touch-nav .nav-mover:after {
      content: "";
      position: absolute;
      top: 0;
      width: 1px;
      height: 20px;
      background-color: #cfcfcf; }
    .touch-nav .nav-mover.move-left {
      background: url('data:image/svg+xml;utf8,<svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" viewBox="157.3 491.7 21.7 39"><style>.st0{fill: #cfcfcf}</style><path class="st0" d="M177 530.7l-19.6-19.5 2.1-2.1 19.6 19.5-2.1 2.1z"/><path class="st0" d="M179 493.8l-19.5 19.6-2.1-2.1 19.5-19.6 2.1 2.1z"/></svg>') center center no-repeat; }
      .touch-nav .nav-mover.move-left:after {
        right: -20px; }
    .touch-nav .nav-mover.move-right {
      float: right;
      background: url("data:image/svg+xml;utf8,<svg id='Layer_1' xmlns='http://www.w3.org/2000/svg' viewBox='157.4 491.6 21.7 39.2'><style>.st0{fill:#cfcfcf}</style><path class='st0' d='M159.5 491.6l19.6 19.6-2.1 2.1-19.6-19.6 2.1-2.1z'/><path class='st0' d='M157.4 528.6L177 509l2.1 2.1-19.6 19.6-2.1-2.1z'/></svg>") center center no-repeat; }
      .touch-nav .nav-mover.move-right:after {
        left: -20px; }
  .touch-nav .date-nav-item-link {
    display: block;
    padding: 0 20px;
    margin: 15px 0;
    position: relative;
    color: #585858;
    text-decoration: none;
    text-transform: uppercase; }
  .touch-nav .date-nav-item {
    margin: 0;
    padding: 0;
    vertical-align: baseline;
    border: 0;
    font-weight: normal;
    list-style: none;
    float: left;
    position: relative;
    height: 50px;
    font-size: 1.25em;
    /* 20px */
    font-weight: 300;
    line-height: 1em; }
    .touch-nav .date-nav-item.active:after {
      content: "";
      width: 95%;
      height: 2px;
      display: inline-block;
      position: absolute;
      bottom: -0.5px;
      left: 0;
      right: 0;
      background-color: #55a440; }
    .touch-nav .date-nav-item.active a {
      color: #55a440; }
      .touch-nav .date-nav-item.active a:after {
        content: "";
        display: inline-block;
        margin: auto;
        position: absolute;
        left: 0;
        right: 0;
        bottom: -19.5px;
        background-image: url(/assets/db67515c15f7669e2a0b16c23c56e657.png);
        background-position: -14px -13px;
        width: 10px;
        height: 5px; }
  .touch-nav .loading-session {
    color: #ccc !important; }
  .touch-nav .loading {
    position: absolute;
    left: 0;
    top: 0;
    z-index: 100;
    width: 100%;
    height: 50px;
    background: rgba(204, 204, 204, 0.5) url("data:image/svg+xml;utf8,<svg width='38' height='38' viewBox='0 0 38 38' xmlns='http://www.w3.org/2000/svg' stroke='#fff'><g transform='translate(1 1)' stroke-width='2' fill='none' fill-rule='evenodd'><circle stroke-opacity='.5' cx='18' cy='18' r='18'/><path d='M36 18c0-9.94-8.06-18-18-18'><animateTransform attributeName='transform' type='rotate' from='0 18 18' to='360 18 18' dur='1s' repeatCount='indefinite'/></path></g></svg>") center center no-repeat; }

.touchNav {
  width: 90%;
  height: 60px;
  overflow: hidden; }
  .touchNav .navitems {
    margin: 0;
    padding: 0; }
    .touchNav .navitems li {
      display: inline-block;
      padding: 20px; }

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/